@model List<Site.Alportech.Cliente.VictoriaCaroline.Models.Projeto>
@{
    ViewData["Title"] = "Projetos";
}

@functions {
    public string FormatarTexto(string texto)
    {
        if (string.IsNullOrEmpty(texto)) return string.Empty;

        // Proteção básica contra XSS
        texto = System.Net.WebUtility.HtmlEncode(texto);

        // Converter quebras de linha
        texto = texto.Replace("\r\n", "<br>").Replace("\n", "<br>");

        // Converter negritos (**texto**)
        texto = System.Text.RegularExpressions.Regex.Replace(
            texto, @"\*\*(.*?)\*\*", "<strong>$1</strong>");

        // Converter itálicos (*texto* ou _texto_)
        texto = System.Text.RegularExpressions.Regex.Replace(
            texto, @"\*(.*?)\*", "<em>$1</em>");
        texto = System.Text.RegularExpressions.Regex.Replace(
            texto, @"_(.*?)_", "<em>$1</em>");

        // Converter tópicos/listas (linhas que começam com -)
        texto = System.Text.RegularExpressions.Regex.Replace(
            texto, @"(<br>|^)- (.*?)(<br>|$)", "$1<li>$2</li>$3");

        return texto;
    }
}

<!-- Projects -->
<section class="content-section">
    <div class="section-header">
        <h1>Projetos</h1>
        <p class="subtitle">Portfólio completo de iniciativas ambientais</p>
    </div>

    <div class="filter-container">
        <div class="filter-buttons">
            <button class="filter-btn active" data-filter="all">Todos</button>
            @foreach (var tag in ViewBag.TagsUnicas)
            {
                <button class="filter-btn" data-filter="@tag.ToLower().Replace(" ", "-")">@tag</button>
            }
        </div>
    </div>

    <div class="project-grid full-grid">
        @foreach (var projeto in Model)
        {
            // Processar tags para o data-category (remover espaços e acentos)
            var tagsArray = projeto.TagsProjeto?.Split(new[] { ',', ';' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(t => t.Trim().ToLower().Replace(" ", "-"))
            .Where(t => !string.IsNullOrEmpty(t)) ?? new string[0];
            var dataCategory = string.Join(" ", tagsArray);

            <div class="project-card" data-category="@dataCategory" data-projeto-id="@projeto.IdProjeto">
                <div class="card-image">
                    @if (!string.IsNullOrEmpty(projeto.ImagemProjetoBase64))
                    {
                        <img src="data:image/jpeg;base64,@projeto.ImagemProjetoBase64" alt="@projeto.TituloProjeto">
                    }
                    else
                    {
                        <img src="/img/banner.jpg" alt="@projeto.TituloProjeto">
                    }
                </div>
                <div class="card-content">
                    <h3>@projeto.TituloProjeto</h3>
                    <div class="card-description">@Html.Raw(FormatarTexto(projeto.DescricaoProjeto!))</div>
                    <div class="card-tags">
                        @foreach (var tag in tagsArray)
                        {
                            <span>@tag.Replace("-", " ")</span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</section>

<!-- Modal de Detalhes do Projeto -->
<div id="projectModal" class="modal">
    <div class="modal-content">
        <div class="close-modal">&times;</div>
        <div class="modal-header">
            <h2 id="modalProjectTitle"></h2>
        </div>
        <div class="modal-body">
            <div class="modal-image">
                <img id="modalProjectImage" src="" alt="">
            </div>
            <div class="modal-details">
                <div class="modal-info">
                    <h3>Descrição</h3>
                    <p id="modalProjectDescription"></p>
                </div>
                <div class="modal-info">
                    <h3>Objetivos</h3>
                    <p id="modalProjectObjectives"></p>
                </div>
                <div class="modal-info">
                    <h3>Resultados</h3>
                    <p id="modalProjectResults"></p>
                </div>
                <div class="modal-info">
                    <h3>Tags</h3>
                    <div class="modal-tags" id="modalProjectTags"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Filtro de projetos por tag
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');

                const filter = this.getAttribute('data-filter');
                const projectCards = document.querySelectorAll('.project-card');

                projectCards.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-category').includes(filter)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
        });

        // Modal de detalhes do projeto
        const modal = document.getElementById('projectModal');
        const closeModal = document.querySelector('.close-modal');
        const projectCards = document.querySelectorAll('.project-card');

        function formatarTexto(texto) {
            if (!texto) return '';

            // Proteção básica contra XSS
            texto = texto.toString()
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');

            // Quebras de linha
            texto = texto.replace(/\r?\n/g, '<br>');

            // Negritos (**texto**)
            texto = texto.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');

            // Itálicos (*texto* ou _texto_)
            texto = texto.replace(/\*([^*]+)\*/g, '<em>$1</em>');
            texto = texto.replace(/_([^_]+)_/g, '<em>$1</em>');

            // Tópicos/listas
            texto = texto.replace(/(<br>|^)- /g, '$1<li>');

            // Permitir tags seguras
            texto = texto.replace(/&lt;(br|strong|em|li)&gt;/g, '<$1>');

            return texto;
        }

        // Abrir modal ao clicar em um projeto
        projectCards.forEach(card => {
            card.addEventListener('click', function () {
                const projetoId = this.getAttribute('data-projeto-id');
                const projeto = @Html.Raw(Json.Serialize(Model));

                const projetoSelecionado = projeto.find(p => p.idProjeto === projetoId);

                if (projetoSelecionado) {
                    document.getElementById('modalProjectTitle').textContent = projetoSelecionado.tituloProjeto;
                    document.getElementById('modalProjectDescription').innerHTML = formatarTexto(projetoSelecionado.descricaoProjeto);
                    document.getElementById('modalProjectObjectives').innerHTML = formatarTexto(projetoSelecionado.objetivosProjeto);
                    document.getElementById('modalProjectResults').innerHTML = formatarTexto(projetoSelecionado.resultadosProjeto);

                    const imgElement = document.getElementById('modalProjectImage');
                    if (projetoSelecionado.imagemProjetoBase64) {
                        imgElement.src = `data:image/jpeg;base64,${projetoSelecionado.imagemProjetoBase64}`;
                    } else {
                        imgElement.src = '/img/banner.jpg';
                    }
                    imgElement.alt = projetoSelecionado.tituloProjeto;

                    const tagsContainer = document.getElementById('modalProjectTags');
                    tagsContainer.innerHTML = '';
                    if (projetoSelecionado.tagsProjeto) {
                        const tags = projetoSelecionado.tagsProjeto.split(/[,;]/)
                            .map(tag => tag.trim())
                            .filter(tag => tag.length > 0);

                        tags.forEach(tag => {
                            const tagElement = document.createElement('span');
                            tagElement.textContent = tag;
                            tagsContainer.appendChild(tagElement);
                        });
                    }

                    modal.classList.add('show');
                    document.body.style.overflow = 'hidden';
                }
            });
        });

        closeModal.addEventListener('click', function () {
            modal.classList.remove('show');
            document.body.style.overflow = 'auto';
        });

        window.addEventListener('click', function (event) {
            if (event.target === modal) {
                modal.classList.remove('show');
                document.body.style.overflow = 'auto';
            }
        });
    </script>
}